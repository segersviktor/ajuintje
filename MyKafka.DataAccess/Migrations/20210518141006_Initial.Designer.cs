// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace MyKafka.DataAccess.Migrations
{
    [DbContext(typeof(MyKafkaDbContext))]
    [Migration("20210518141006_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyKafka.Domain.Entities.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Bus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MemberFee")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociationTypeId");

                    b.ToTable("Associations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssociationTypeId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberFee = 45.0,
                            Name = "Scouts 92ste",
                            Number = 0,
                            Slug = "scouts-92ste",
                            ZipCode = 0
                        });
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.AssociationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssociationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Scouts en Gidsen Vlaanderen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chirojeugd Vlaanderen"
                        });
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.AssociationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationId")
                        .HasColumnType("int");

                    b.Property<string>("Bus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CampEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CampFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("CampStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupIndex")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociationId");

                    b.ToTable("AssociationUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssociationId = 1,
                            CampEndDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 1,
                            Name = "Paloebies",
                            Number = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            Id = 2,
                            AssociationId = 1,
                            CampEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 2,
                            Name = "Wolven",
                            Number = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            Id = 3,
                            AssociationId = 1,
                            CampEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 3,
                            Name = "Poema's",
                            Number = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            Id = 4,
                            AssociationId = 1,
                            CampEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 4,
                            Name = "JV/PV",
                            Number = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            Id = 5,
                            AssociationId = 1,
                            CampEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 5,
                            Name = "Kevins",
                            Number = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            Id = 6,
                            AssociationId = 1,
                            CampEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CampFee = 0.0,
                            CampStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupIndex = 6,
                            Name = "Jins",
                            Number = 0,
                            ZipCode = 0
                        });
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.CertificateLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CertificateReceiverId");

                    b.HasIndex("MemberId");

                    b.ToTable("CertificateLogs");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.CertificateReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificateReceivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christelijke Mutualiteit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nationale Verbond van Socialistische Mutualiteiten"
                        });
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssociationUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Bus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CampAttendance")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MemberFeePaid")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("SocialFee")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociationUnitId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.Association", b =>
                {
                    b.HasOne("MyKafka.Domain.Entities.AssociationType", "AssociationType")
                        .WithMany()
                        .HasForeignKey("AssociationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationType");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.AssociationUnit", b =>
                {
                    b.HasOne("MyKafka.Domain.Entities.Association", "Association")
                        .WithMany("AssociationUnits")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Association");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.CertificateLog", b =>
                {
                    b.HasOne("MyKafka.Domain.Entities.CertificateReceiver", "CertificateReceiver")
                        .WithMany()
                        .HasForeignKey("CertificateReceiverId");

                    b.HasOne("MyKafka.Domain.Entities.Member", "Member")
                        .WithMany("CertificateLogs")
                        .HasForeignKey("MemberId");

                    b.Navigation("CertificateReceiver");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.Member", b =>
                {
                    b.HasOne("MyKafka.Domain.Entities.AssociationUnit", "AssociationUnit")
                        .WithMany("Members")
                        .HasForeignKey("AssociationUnitId");

                    b.Navigation("AssociationUnit");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.Association", b =>
                {
                    b.Navigation("AssociationUnits");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.AssociationUnit", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MyKafka.Domain.Entities.Member", b =>
                {
                    b.Navigation("CertificateLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
